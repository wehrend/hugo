<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bits &amp; pieces - Sven Wehrend</title>
    <link>http://localhost:1313/en/docs/digital_logic/</link>
    <description>Recent content on Bits &amp; pieces - Sven Wehrend</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/en/docs/digital_logic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>00_combinatorial_logic</title>
      <link>http://localhost:1313/en/docs/digital_logic/00_combinatorial_logic/</link>
      <pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/en/docs/digital_logic/00_combinatorial_logic/</guid>
      <description>This course about digital logic is splitted into two big chunks:
Combinatorial circuits (without memory elements)
Sequential circuits (with memory elements)
While combinatorial circuits consists of boolean gates interconnected without feedback function, sequential gates posses a memory function,which makes them able to progress to another state.
A combinatorial circuit can have n -wide vector of inputs and an m -wide vector of outputs.
Combinatorial circuits can be described in different ways: As a formula, a circuit, a truth table or a Karnaugh map.</description>
    </item>
    
    <item>
      <title>07_RISC-V</title>
      <link>http://localhost:1313/en/docs/digital_logic/07_risc_v/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/en/docs/digital_logic/07_risc_v/</guid>
      <description>Digital design meets computer architecture RISC vs CISC and The RISC-V architecture Existing processor types can be classified by their instruction type set: Reduced instruction set computer (RISC), Complex instruction set computer (CISC) and hybrid forms. While mini processors like ARM for embedded systems mostly utilise reduced instruction sets,todays workstation and Server Architectures (x86, x86_64) are hybrids of RISC and CISC. The idea of a reduced instruction set is to avoid big complex instructions and multiple different addressing modes (as those typically used in x86 architectures).</description>
    </item>
    
    <item>
      <title>06_Memory</title>
      <link>http://localhost:1313/en/docs/digital_logic/06_memory/</link>
      <pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/en/docs/digital_logic/06_memory/</guid>
      <description>Memory Organization In this blog post the author will introduce the different types of semiconductor memory. This is a wide field, so the goal here is to focus on the most important ones and draw the differences between the different types.
The Memory hierarchy As in computing all is about performance, we first have a look at the memory hierarchy. As you can see in the pyramid below, memory is ordered in layers.</description>
    </item>
    
    <item>
      <title>05_ALU</title>
      <link>http://localhost:1313/en/docs/digital_logic/05_alu/</link>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/en/docs/digital_logic/05_alu/</guid>
      <description>The ALU, the swiss knife of every cpu Today the author wants to introduce an important part of every cpu: The arithmetic logic unit (ALU), we already know about some functions presented in the blog posts before. In this post we want to close the gaps systematically. Time for a short recap: The logic functions &amp;#39;and&amp;#39;,&amp;#39;or&amp;#39;,&amp;#39;not&amp;#39; and &amp;#39;xor&amp;#39; were introduced, also the arithmetic functions &amp;#39;add&amp;#39; and &amp;#39;sub&amp;#39; for integers were shown.</description>
    </item>
    
    <item>
      <title>04_Signs</title>
      <link>http://localhost:1313/en/docs/digital_logic/04_signs/</link>
      <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/en/docs/digital_logic/04_signs/</guid>
      <description>Extending the binary system While in the previous blog post about addition, the binary numbers had only one interpretation, we extend the system here to include negative (integer) numbers.
The simplest approach we can think of is to use the most significant bit (MSB) as sign bit, where &amp;#39;0&amp;#39; ist intepreted as sign &amp;#39;+&amp;#39; and &amp;#39;1&amp;#39; is interpreted as &amp;#39;-&amp;#39;. However as we see in the following calculation this does not work as expected:</description>
    </item>
    
    <item>
      <title>03_binary_system</title>
      <link>http://localhost:1313/en/docs/digital_logic/03_binary_system/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/en/docs/digital_logic/03_binary_system/</guid>
      <description>The Binary System All computer we act with on a daily base do not know about the decimal system we are using, based on the ten digits at our hands. All they know about are the states on and off. We build an imaginary circuit with a power source a control light - here an LED (Light Emitting Diode) - and a switch, closing the connection let the light flash.</description>
    </item>
    
    <item>
      <title>02_XOR</title>
      <link>http://localhost:1313/en/docs/digital_logic/02_xor/</link>
      <pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/en/docs/digital_logic/02_xor/</guid>
      <description>XOR As there are a lot of important applications for the exclusive-or (XOR) operation it is dedicated an own blog post. Two of the most important are:
XOR operations are often used in a Linear Feedback Shift Registers (LFSR). LFSR are a crucial step in scrambler / descrambler respectively, which are used in transmitters / receivers
Part of an encryption algorithmus
Last but not least an important part of a halfadder.</description>
    </item>
    
    <item>
      <title>01_boolean_algebra</title>
      <link>http://localhost:1313/en/docs/digital_logic/01_boolean_algebra/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/en/docs/digital_logic/01_boolean_algebra/</guid>
      <description>Boolean Algebra and Basic Logic Gates We are starting (the journey) with three very basic logic functions (or operations), which despite their simplicity already are valid instructions of a regular CPU:
NOT, AND and OR
Logical functions - also called operations, the author will use both terms interchangebly here - can be described in various ways, most often it is described implicit as boolean equation, but it can also be explained explicit in a truth table.</description>
    </item>
    
  </channel>
</rss>
