<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>draft on Bits &amp; pieces - Sven Wehrend</title>
    <link>http://localhost:1313/tags/draft/</link>
    <description>Recent content in draft on Bits &amp; pieces - Sven Wehrend</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/draft/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How does a CPU work 2? Overview</title>
      <link>http://localhost:1313/de/pages/overview2/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/de/pages/overview2/</guid>
      <description>From Combinatorial to Sequential Logic - Introduction Introduction to Sequential Logic
We get from purely conmbinatorial logic circuits wihout any form of memeory to sequential logic circuits with some type of memory (mostly flipflops)
Clocks,Flipflops and registers Clocks,flipflops and registers
We make a leap into the area of sequential logic and introduce some concepts vital for the sequential logics, like clock, flipflops and registers
Automata Automata
We introduce the two (three) different automata Mealy, Moore (and Medwedjew).</description>
    </item>
    
    <item>
      <title>How does a CPU work 2? Overview</title>
      <link>http://localhost:1313/en/pages/overview2/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/en/pages/overview2/</guid>
      <description>From Combinatorial to Sequential Logic - Introduction Introduction to Sequential Logic
We get from purely conmbinatorial logic circuits wihout any form of memeory to sequential logic circuits with some type of memory (mostly flipflops)
Clocks,Flipflops and registers Clocks,flipflops and registers
We make a leap into the area of sequential logic and introduce some concepts vital for the sequential logics, like clock, flipflops and registers
Automata Automata
We introduce the two (three) different automata Mealy, Moore (and Medwedjew).</description>
    </item>
    
    <item>
      <title>X2_cordic</title>
      <link>http://localhost:1313/de/docs/digital_logic_x/x2_cordic/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/de/docs/digital_logic_x/x2_cordic/</guid>
      <description>The CORDIC algoritm and direct digital synthesis (DDS) The CORDIC (which stands for &amp;#34;coordinate rotation digital computer&amp;#34;) algorithm, was developed in 1956 by Jack.E. Volder, to replace the analog resolvers used for missiles navigation by digital computation on digital computer. The algorithm turned out to be very successfull, today it can be found in every pocket calculator, doing the computation of the trigonometrical functions sinus, cosinus and tangens. But the algorithm is not limited to that it can also calculate logarithmic and exponential functions, given the needed modifications.</description>
    </item>
    
    <item>
      <title>X2_cordic</title>
      <link>http://localhost:1313/en/docs/digital_logic_x/x2_cordic/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/en/docs/digital_logic_x/x2_cordic/</guid>
      <description>The CORDIC algoritm and direct digital synthesis (DDS) The CORDIC (which stands for &amp;#34;coordinate rotation digital computer&amp;#34;) algorithm, was developed in 1956 by Jack.E. Volder, to replace the analog resolvers used for missiles navigation by digital computation on digital computer. The algorithm turned out to be very successfull, today it can be found in every pocket calculator, doing the computation of the trigonometrical functions sinus, cosinus and tangens. But the algorithm is not limited to that it can also calculate logarithmic and exponential functions, given the needed modifications.</description>
    </item>
    
    <item>
      <title>X0_multiplication</title>
      <link>http://localhost:1313/de/docs/digital_logic_x/x0_multiplication/</link>
      <pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/de/docs/digital_logic_x/x0_multiplication/</guid>
      <description>Multiplication and Divsion Multiplication operations can be implemented in very different ways: Slow, as a serial operation, controlled by a micro program or fast in dedicated hardware.
The division is a more complex operation, and thus will be discussed in another post. Also for multiplication we set the scope to unsigned integer numbers.
Shift left and shift right For multipliers that are powers of two, the operation is very simple and can be implemented via a shift left.</description>
    </item>
    
    <item>
      <title>X0_multiplication</title>
      <link>http://localhost:1313/en/docs/digital_logic_x/x0_multiplication/</link>
      <pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/en/docs/digital_logic_x/x0_multiplication/</guid>
      <description>Multiplication and Divsion Multiplication operations can be implemented in very different ways: Slow, as a serial operation, controlled by a micro program or fast in dedicated hardware.
The division is a more complex operation, and thus will be discussed in another post. Also for multiplication we set the scope to unsigned integer numbers.
Shift left and shift right For multipliers that are powers of two, the operation is very simple and can be implemented via a shift left.</description>
    </item>
    
    <item>
      <title>07_RISC-V</title>
      <link>http://localhost:1313/de/docs/digital_logic/07_risc_v/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/de/docs/digital_logic/07_risc_v/</guid>
      <description>Digital design meets computer architecture RISC vs CISC and The RISC-V architecture Existing processor types can be classified by their instruction type set: Reduced instruction set computer (RISC), Complex instruction set computer (CISC) and hybrid forms. While mini processors like ARM for embedded systems mostly utilise reduced instruction sets,todays workstation and Server Architectures (x86, x86_64) are hybrids of RISC and CISC. The idea of a reduced instruction set is to avoid big complex instructions and multiple different addressing modes (as those typically used in x86 architectures).</description>
    </item>
    
    <item>
      <title>07_RISC-V</title>
      <link>http://localhost:1313/en/docs/digital_logic/07_risc_v/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/en/docs/digital_logic/07_risc_v/</guid>
      <description>Digital design meets computer architecture RISC vs CISC and The RISC-V architecture Existing processor types can be classified by their instruction type set: Reduced instruction set computer (RISC), Complex instruction set computer (CISC) and hybrid forms. While mini processors like ARM for embedded systems mostly utilise reduced instruction sets,todays workstation and Server Architectures (x86, x86_64) are hybrids of RISC and CISC. The idea of a reduced instruction set is to avoid big complex instructions and multiple different addressing modes (as those typically used in x86 architectures).</description>
    </item>
    
    <item>
      <title>How does a CPU work? Overview</title>
      <link>http://localhost:1313/de/pages/overview/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/de/pages/overview/</guid>
      <description>Introduction and overview Introduction and overview
Every topic of this course is broken up into two parts: A part about the mathematical side of digital logic, ideally almost independent from implementation details and a more concrete part handling this very details. In the concrete part we will mostly discuss the implementation on an electrical layer, though there are still other solutions possible based on fluid dynamics, or optical gates, most computers and logic gates are still based on electronics and semiconductor technology and this will not change with quantum computing, which is mostly tied to / adjunct to probability theory.</description>
    </item>
    
    <item>
      <title>How does a CPU work? Overview</title>
      <link>http://localhost:1313/en/pages/overview/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/en/pages/overview/</guid>
      <description>Introduction and overview Introduction and overview
Every topic of this course is broken up into two parts: A part about the mathematical side of digital logic, ideally almost independent from implementation details and a more concrete part handling this very details. In the concrete part we will mostly discuss the implementation on an electrical layer, though there are still other solutions possible based on fluid dynamics, or optical gates, most computers and logic gates are still based on electronics and semiconductor technology and this will not change with quantum computing, which is mostly tied to / adjunct to probability theory.</description>
    </item>
    
  </channel>
</rss>
